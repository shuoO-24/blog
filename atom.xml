<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shuo的空间站</title>
  
  <subtitle>Hi! Welcome my protfolio v1.0!</subtitle>
  <link href="https://shuoo-24.github.io/atom.xml" rel="self"/>
  
  <link href="https://shuoo-24.github.io/"/>
  <updated>2021-01-16T01:24:21.036Z</updated>
  <id>https://shuoo-24.github.io/</id>
  
  <author>
    <name>Shuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>File Input/Output in C++</title>
    <link href="https://shuoo-24.github.io/2021/01/14/hello-world/"/>
    <id>https://shuoo-24.github.io/2021/01/14/hello-world/</id>
    <published>2021-01-14T22:06:28.000Z</published>
    <updated>2021-01-16T01:24:21.036Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://www.sutori.com/story/timeline-template--CnnrLrFPZNNrJvjjYx2uWKqa/embed" width="100%" height="600" frameborder="0" allowfullscreen=""></iframe><script src="https://assets.sutori.com/frontend-assets/assets/iframeResizer.executer.js"></script><h1 id="Opening-a-file"><a href="#Opening-a-file" class="headerlink" title="Opening a file"></a>Opening a file</h1><p><code>fopen()</code> function is used for opening a file.</p><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h2><p><code>FILE pointer_name = fopen ("file_name", "Mode");</code></p><p>pointer_name can be anything of your choice.<br>file_name is the name of the file, which you want to open. Specify the full path here like “C:\myfiles\newfile.txt”.</p><p>While opening a file, you need to <strong>specify the mode</strong>. The mode that we use to read a file is “r” which is “read only mode”.<br>    for example:<br><code>FILE  *fp; fp = fopen("C:\\myfiles\\newfile.txt", "r");</code><br>The address of the first character is stored in pointer <code>fp</code>.</p><h2 id="How-to-check-whether-the-file-has-opened-successfully"><a href="#How-to-check-whether-the-file-has-opened-successfully" class="headerlink" title="How to check whether the file has opened successfully?"></a>How to check whether the file has opened successfully?</h2><p>If file does not open successfully then the pointer will be assigned a <strong>NULL</strong> value, so you can write the logic like this:<br>This code will check whether the file has opened successfully or not. If the file does not open, this will display an error message to the user.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FILE fpr;</span><br><span class="line">fpr = fopen("C:\\myfiles\\newfile.txt", "r");</span><br><span class="line">if (fpr == NULL)</span><br><span class="line">{</span><br><span class="line">    puts("Error while opening file");</span><br><span class="line">    exit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Various-File-Opening-Modes"><a href="#Various-File-Opening-Modes" class="headerlink" title="Various File Opening Modes:"></a>Various File Opening Modes:</h2><p>The file is opened using <code>fopen()</code> function, while opening you can use any of the following mode as the requirement.</p><h3 id="Mode-“r”"><a href="#Mode-“r”" class="headerlink" title="Mode “r”:"></a>Mode “<code>r</code>”:</h3><p>It is a <strong>read only mode</strong>, which means if the file is opened in r mode, it won’t allow you to write and modify content of it. When <code>fopen() </code>opens a file successfully then it returns the address of first character of the file, otherwise it returns NULL.</p><h3 id="Mode-“w”"><a href="#Mode-“w”" class="headerlink" title="Mode “w”:"></a>Mode “<code>w</code>”:</h3><p>It is a <strong>write only mode</strong>. The<code> fopen()</code> function creates a new file when the specified file doesn’t exist and if it fails to open file then it returns NULL.</p><h3 id="Mode-“a”"><a href="#Mode-“a”" class="headerlink" title="Mode “a”:"></a>Mode “<code>a</code>”:</h3><p>Using this mode Content can be appended at the end of an existing file. Like Mode “w”, <code>fopen() </code>creates a new file if it file doesn’t exist. On unsuccessful open it returns NULL.<br>File Pointer points to: last character of the file.</p><h3 id="Mode-“r-”"><a href="#Mode-“r-”" class="headerlink" title="Mode “r+”:"></a>Mode “<code>r+</code>”:</h3><p>This mode is same as mode “r”; however you can perform various operations on the file opened in this mode. You are allowed to <strong>read, write and modify</strong> the content of file opened in “r+” mode.<br>File Pointer points to: First character of the file.</p><h3 id="Mode-“w-”"><a href="#Mode-“w-”" class="headerlink" title="Mode “w+”:"></a>Mode “<code>w+</code>”:</h3><p>Same as mode “w” apart from operations, which can be performed; the file can be <strong>read, write and modified</strong> in this mode.</p><h3 id="Mode-“a-”"><a href="#Mode-“a-”" class="headerlink" title="Mode “a+”:"></a>Mode “<code>a+</code>”:</h3><p>Same as mode “a”; you can <strong>read and append the data</strong> in the file, however content modification is not allowed in this mode.</p><hr><h1 id="Reading-a-File"><a href="#Reading-a-File" class="headerlink" title="Reading a File"></a>Reading a File</h1><p>To read the file, we must open it first using any of the mode, for example if you only want to read the file then open it in “r” mode. Based on the mode selected during file opening, we are allowed to perform certain operations on the file.</p><h2 id="C-Program-to-read-a-file"><a href="#C-Program-to-read-a-file" class="headerlink" title="C Program to read a file"></a>C Program to read a file</h2><p><code>fgetc( )</code></p><p>This function reads the character from current pointer’s position and upon successful read moves the pointer to next character in the file. Once the pointers reaches to the end of the file, this function returns <code>EOF</code> (End of File). We have used <code>EOF</code> in our program to determine the end of the file.</p><figure class="highlight plain"><figcaption><span><stdio.h></stdio.h></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">     /* Pointer to the file */</span><br><span class="line">     FILE *fp1;</span><br><span class="line">     /* Character variable to read the content of file */</span><br><span class="line">     char c;</span><br><span class="line"></span><br><span class="line">     /* Opening a file in r mode*/</span><br><span class="line">     fp1= fopen ("C:\\myfiles\\newfile.txt", "r");</span><br><span class="line"></span><br><span class="line">     /* Infinite loop –I have used break to come out of the loop*/</span><br><span class="line">     while(1)</span><br><span class="line">     {</span><br><span class="line">        c = fgetc(fp1);</span><br><span class="line">        if(c==EOF)</span><br><span class="line">            break;</span><br><span class="line">        else</span><br><span class="line">            printf("%c", c);</span><br><span class="line">     }</span><br><span class="line">     fclose(fp1);</span><br><span class="line">     return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="Writing-to-a-file"><a href="#Writing-to-a-file" class="headerlink" title="Writing to a file"></a>Writing to a file</h1><p>To write the file, we must <strong>open the file in a mode that supports writing</strong>. For example, if you open a file in “r” mode, you won’t be able to write the file as “r” is read only mode that only allows reading.</p><h2 id="Example-C-Program-to-write-the-file"><a href="#Example-C-Program-to-write-the-file" class="headerlink" title="Example: C Program to write the file"></a>Example: C Program to write the file</h2><p>This program asks the user to enter a character and writes that character at the end of the file. If the file doesn’t exist then this program will create a file with the specified name and writes the input character into the file.</p><figure class="highlight plain"><figcaption><span>include <stdio.h></stdio.h></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">   char ch;</span><br><span class="line">   FILE *fpw;</span><br><span class="line">   fpw = fopen("C:\\newfile.txt","w");</span><br><span class="line"></span><br><span class="line">   if(fpw == NULL)</span><br><span class="line">   {</span><br><span class="line">      printf("Error");   </span><br><span class="line">      exit(1);             </span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   printf("Enter any character: ");</span><br><span class="line">   scanf("%c",&amp;ch);</span><br><span class="line"></span><br><span class="line">   /* You can also use fputc(ch, fpw);*/</span><br><span class="line">   fprintf(fpw,"%c",ch);</span><br><span class="line">   fclose(fpw);</span><br><span class="line"></span><br><span class="line">   return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="Closing-a-file"><a href="#Closing-a-file" class="headerlink" title="Closing a file"></a>Closing a file</h1><p><code>fclose(fp)</code></p><p>The <code>fclose()</code> function is used for closing an opened file. As an argument you must provide a pointer to the file that you want to close.</p><h2 id="An-example-to-show-Open-read-write-and-close-operation-in-C"><a href="#An-example-to-show-Open-read-write-and-close-operation-in-C" class="headerlink" title="An example to show Open, read, write and close operation in C"></a>An example to show Open, read, write and close operation in C</h2><figure class="highlight plain"><figcaption><span><stdio.h></stdio.h></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    char ch;</span><br><span class="line"></span><br><span class="line">    /* Pointer for both the file*/</span><br><span class="line">    FILE *fpr, *fpw;</span><br><span class="line">    /* Opening file FILE1.C in “r” mode for reading */</span><br><span class="line">    fpr = fopen("C:\\file1.txt", "r");</span><br><span class="line"></span><br><span class="line">    /* Ensure FILE1.C opened successfully*/</span><br><span class="line">    if (fpr == NULL)</span><br><span class="line">    {</span><br><span class="line">         puts("Input file cannot be opened");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /* Opening file FILE2.C in “w” mode for writing*/</span><br><span class="line">    fpw= fopen("C:\\file2.txt", "w");</span><br><span class="line"></span><br><span class="line">    /* Ensure FILE2.C opened successfully*/</span><br><span class="line">    if (fpw == NULL)</span><br><span class="line">    {</span><br><span class="line">       puts("Output file cannot be opened");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /*Read &amp; Write Logic*/</span><br><span class="line">    while(1)</span><br><span class="line">    {</span><br><span class="line">        ch = fgetc(fpr);</span><br><span class="line">        if (ch==EOF)</span><br><span class="line">            break;</span><br><span class="line">        else</span><br><span class="line">            fputc(ch, fpw);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /* Closing both the files */</span><br><span class="line">    fclose(fpr);</span><br><span class="line">    fclose(fpw);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="How-to-read-write-I-O-Strings-in-Files-fgets-amp-fputs"><a href="#How-to-read-write-I-O-Strings-in-Files-fgets-amp-fputs" class="headerlink" title="How to read/ write (I/O) Strings in Files? -fgets&amp;fputs"></a>How to read/ write (I/O) Strings in Files? -fgets&amp;fputs</h2><p>Here we will discuss how to read and write strings into a file.</p><p><code>char *fgets(char *s, int rec_len, FILE *fpr)</code><br>s: Array of characters to store strings.<br><code>rec_len</code>: Length of the input record.<br><code>fpr</code>: Pointer to the input file.</p><h3 id="Lets-take-an-example"><a href="#Lets-take-an-example" class="headerlink" title="Lets take an example:"></a>Lets take an example:</h3><p>Example to read the strings from a file in C programming</p><figure class="highlight plain"><figcaption><span><stdio.h></stdio.h></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    FILE *fpr;</span><br><span class="line">    /*Char array to store string */</span><br><span class="line">    char str[100];</span><br><span class="line">    /*Opening the file in "r" mode*/</span><br><span class="line">    fpr = fopen("C:\\mynewtextfile.txt", "r");</span><br><span class="line"></span><br><span class="line">    /*Error handling for file open*/</span><br><span class="line">    if (fpr == NULL)</span><br><span class="line">    {</span><br><span class="line">       puts("Issue in opening the input file");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /*Loop for reading the file till end*/</span><br><span class="line">    while(1)</span><br><span class="line">    {</span><br><span class="line">       if(fgets(str, 10, fpr) ==NULL)</span><br><span class="line">            break;</span><br><span class="line">       else</span><br><span class="line">            printf("%s", str);</span><br><span class="line">    }</span><br><span class="line">    /*Closing the input file after reading*/</span><br><span class="line">    fclose(fpr);</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>In the above example we have used fgets function like this:<br><code>fgets(str, 10, fpr)</code></p><ul><li>Here str represents the string (array of char) in which you are storing the string after reading it from file.</li><li>10 is the length of the string that needs to be read every time.</li><li>fpr is pointer to file, which is going to be read.</li></ul><p>Why I used<br><code>if(fgets(str, 10, fpr)==NULL</code><br>as a logic to determine end of the file?</p><p>In the above examples, we have used <code>ch==EOF</code>to get to know the end of the file. Here we have used this logic because <code>fgets</code> returns NULL when there is no more records are available to be read.</p><h2 id="C-Program-–-Writing-string-to-a-file"><a href="#C-Program-–-Writing-string-to-a-file" class="headerlink" title="C Program – Writing string to a file"></a>C Program – Writing string to a file</h2><p><code>int fputs ( const char * s, FILE * fpw );</code><br><code>char *s</code>: array of char<br><code>FILE *fpw</code> :Pointer (of FILE type) to the file, which is going to be written</p><figure class="highlight plain"><figcaption><span><stdio.h></stdio.h></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">     FILE *fpw;</span><br><span class="line"></span><br><span class="line">     /*Char array to store strings */</span><br><span class="line">     char str[100];</span><br><span class="line"></span><br><span class="line">     /*Opening the file FILEW.TXT in "w" mode for writing*/</span><br><span class="line">     fpw = fopen("C:\\mynewtextfile2.txt", "w");</span><br><span class="line"></span><br><span class="line">     /*Error handling for output file*/</span><br><span class="line">     if (fpw== NULL)</span><br><span class="line">     {</span><br><span class="line">          puts("Issue in opening the Output file");</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     printf("Enter your string:");</span><br><span class="line"></span><br><span class="line">     /*Stored the input string into array – str*/</span><br><span class="line">     gets(str);</span><br><span class="line"></span><br><span class="line">     /* Copied the content of str into file – </span><br><span class="line">      * mynewtextfile2.txt using pointer – fpw</span><br><span class="line">      */</span><br><span class="line">     fputs(str, fpw);</span><br><span class="line"></span><br><span class="line">     /*Closing the Output file after successful writing*/</span><br><span class="line">     fclose(fpw);</span><br><span class="line">     return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="fputs-takes-two-arguments"><a href="#fputs-takes-two-arguments" class="headerlink" title="fputs takes two arguments"></a>fputs takes two arguments</h3><p><code>fputs(str, fpw)</code></p><ol><li><em>str</em>:represents the array, in which string is stored.</li><li><em>fpw</em>: FILE pointer to the output file, in which record needs to be written.</li></ol><h4 id="Point-to-note-about-fput"><a href="#Point-to-note-about-fput" class="headerlink" title="Point to note about fput:"></a>Point to note about <em>fput</em>:</h4><p>fputs by default doesn’t add new line after writing each record, in order to do that manually – you can have the following statement after each write to the file.</p><p><code>fputs("\n", fpw);</code></p><h2 id="C-FILE-I-O-for-Binary-files"><a href="#C-FILE-I-O-for-Binary-files" class="headerlink" title="C FILE I/O for Binary files"></a>C FILE I/O for Binary files</h2><p>So far, we have learned file operations on text files, what if the files are binary (such as <code>.exe</code> file). The above programs will not work for binary files, however there is a minor change in handling Binary files. The main difference is the file name &amp; modes. Lets understand this with the help of an example. Lets say I have two binary files bin1.exe &amp; bin2.exe – I want to copy content of bin1.exe to bin2.exe:</p><h3 id="Example-Reading-and-Writing-Binary-Files-in-C"><a href="#Example-Reading-and-Writing-Binary-Files-in-C" class="headerlink" title="Example: Reading and Writing Binary Files in C"></a>Example: Reading and Writing Binary Files in C</h3><figure class="highlight plain"><figcaption><span><stdio.h></stdio.h></span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">    char ch;</span><br><span class="line"></span><br><span class="line">    /* Pointers for both binary files*/</span><br><span class="line">    FILE *fpbr, *fpbw;</span><br><span class="line"></span><br><span class="line">    /* Open for bin1.exe file in rb mode */</span><br><span class="line">    fpbr = fopen("bin1.exe", "rb");</span><br><span class="line"></span><br><span class="line">    /* test logic for successful open*/</span><br><span class="line">    if (fpbr == NULL)</span><br><span class="line">    {</span><br><span class="line">        puts("Input Binary file is having issues while opening");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /* Opening file bin2.exe in “wb” mode for writing*/</span><br><span class="line">    fpbw= fopen("bin2.exe", "wb");</span><br><span class="line"></span><br><span class="line">    /* Ensure bin2.exe opened successfully*/</span><br><span class="line">    if (fpbw == NULL)</span><br><span class="line">    {</span><br><span class="line">       puts("Output binary file is having issues while opening");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /*Read &amp; Write Logic for binary files*/</span><br><span class="line">    while(1)</span><br><span class="line">    {</span><br><span class="line">        ch = fgetc(fpbr);</span><br><span class="line">        if (ch==EOF)</span><br><span class="line">             break;</span><br><span class="line">         else</span><br><span class="line">             fputc(ch, fpbw);</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     /* Closing both the binary files */</span><br><span class="line">     fclose(fpbr);</span><br><span class="line">     fclose(fpbw);</span><br><span class="line"></span><br><span class="line">     return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Note: File opening modes are “<code>rb</code>” and “<code>wb</code>” instead of “r” &amp; “w”..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;https://www.sutori.com/story/timeline-template--CnnrLrFPZNNrJvjjYx2uWKqa/embed&quot; width=&quot;100%&quot; height=&quot;600&quot; frameborder=&quot;0&quot; allow</summary>
      
    
    
    
    <category term="Programming" scheme="https://shuoo-24.github.io/categories/Programming/"/>
    
    <category term="C/C++" scheme="https://shuoo-24.github.io/categories/Programming/C-C/"/>
    
    <category term="Basics" scheme="https://shuoo-24.github.io/categories/Programming/C-C/Basics/"/>
    
    
    <category term="Notes" scheme="https://shuoo-24.github.io/tags/Notes/"/>
    
    <category term="C Programming" scheme="https://shuoo-24.github.io/tags/C-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Genre in Dope Music Video</title>
    <link href="https://shuoo-24.github.io/2021/01/14/New-Post/"/>
    <id>https://shuoo-24.github.io/2021/01/14/New-Post/</id>
    <published>2021-01-14T22:06:28.000Z</published>
    <updated>2021-01-16T02:29:32.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Hallyu"><a href="#What-is-Hallyu" class="headerlink" title="What is Hallyu?"></a>What is Hallyu?</h1><h2 id="the-Korean-Wave"><a href="#the-Korean-Wave" class="headerlink" title="the Korean Wave"></a>the Korean Wave</h2><p>the most popular cultural phenomenon</p><h3 id="History-Stages-of-Hallyu"><a href="#History-Stages-of-Hallyu" class="headerlink" title="History/Stages of Hallyu"></a>History/Stages of Hallyu</h3><h4 id="1st-stage"><a href="#1st-stage" class="headerlink" title="1st stage"></a>1st stage</h4><h1 id="What-is-K-pop"><a href="#What-is-K-pop" class="headerlink" title="What is K-pop?"></a>What is K-pop?</h1><p>the most successful transnational branding in the 21st century<br>//‘“Gangnam Style” video clip</p><h2 id="history-of-K-pop"><a href="#history-of-K-pop" class="headerlink" title="history of K-pop"></a>history of K-pop</h2><h3 id="First-Generation"><a href="#First-Generation" class="headerlink" title="First Generation"></a>First Generation</h3><p>dated from the 1990s to the mid 2000s, focused on the production of artists through a process led by investments from large South Korean ‘chaebol’ (family-owned) companies.<br> domestic youth market and neighbouring markets in China, Japan, Taiwan, and Hong Kong </p><h3 id="Second-Generation"><a href="#Second-Generation" class="headerlink" title="Second Generation"></a>Second Generation</h3><p>from the mid-2000s to the present<br>进军 digital media，冲击全球市场</p><h1 id="Why-music-video-genre-matters-and-What-is-it"><a href="#Why-music-video-genre-matters-and-What-is-it" class="headerlink" title="Why music video genre matters and What is it?"></a>Why music video genre matters and What is it?</h1><ul><li>music video is key <strong>marketing tool</strong> that could be globally distributed at <strong>low-cost</strong> </li><li>video-distribution platforms with <strong>great popularity and heavy traffic</strong>  such as <strong>YouTube</strong> </li><li>pseudo-documentary, narrative, and stage performance — together help to ‘<strong>legitimate</strong>’ both performance and performer<br>facilitate K-pop entertainment companies to refine their products(artists and artworks) — development genre conventions as well as promote the emphasis on “<strong>perfect staged performance</strong>“ <img src="/image/MAMA_BTS_1.JPG" alt="MAMA_BTS"></li></ul><hr><h1 id="Who-is-BTS"><a href="#Who-is-BTS" class="headerlink" title="Who is BTS?"></a>Who is BTS?</h1><p>the one who achieved perfect staged performance and started new music and music video genres, thus becomes the most successful idol(in business$$ and art) in K-pop.</p><h2 id="Why-so-many-people-loves-them"><a href="#Why-so-many-people-loves-them" class="headerlink" title="Why so many people loves them?"></a>Why so many people loves them?</h2><ul><li>正能量: emphasis on personal success</li><li>pull themselves up by their own bootlaces, raise from humble origins(but they are talented, with no doubts)</li><li>they always make good music and practice hard while others are partying and having fun<h3 id="Dope"><a href="#Dope" class="headerlink" title="Dope!"></a>Dope!</h3>（看b站和YouTube的MV解析）<br>Bang intended “bulletproof” to function as a celebration of the kids’ toughness and ability to withstand the pressures of the world. But he also wanted the band to be able to be sincere and genuine — not immaculate idols groomed amid studio culture, but real boys who shared their authentic personalities and talents with the world.<br>This approach is quite different from the normal studio approach to idoldom, wherein idols are trained to be pleasant but mild — to be blank slates upon which viewers can project their fantasies. By contrast, Bang wanted BTS to be full of figures that audiences could relate to. </li></ul><p>There are six main ways BTS breaks with established precedent for K-pop boy bands to carry out this mission:</p><ol><li>They frequently write their own songs and lyrics.</li><li>Their lyrics are socially conscious and especially attuned to describing the pressures of modern teen life in South Korea.</li><li>They create and manage most of their own social media presence.</li><li>They aren’t signed to “slave contracts,” nor do their contracts have the grueling restrictions of other idol groups.</li><li>They tend to focus on marketing entire albums rather than individual singles.</li><li>They talk openly about the struggles and anxieties of their career instead of presenting an extremely polished image at all times.</li><li>“Dope” also drew attention to the band’s talent in a major way: It was the moment South Korea realized that these boys could dance.</li></ol><p>“‘Dope’ is probably my favorite video of all time,” Stephen said. “Focusing on dancing like that — they weren’t the only ones doing it, but they were definitely the best ones doing it.”</p><p>“And they alternate,” he added. “They do the big, boisterous, in-your-face dance video. But they also do those more emotional mini-art-flick type videos.” And no BTS art flick is better than “Blood Sweat &amp; Tears,” the gothic, gorgeous 2016 single that launched them into a new level of international fame.</p><p>“When The Most Beautiful Moment in Life series started, I saw something,” she told me. “And that’s when I went back and watched their old vlogs. Up to and after debut, [these] skinny kids all crammed in a studio the size of a broom closet. Just … being honest about how much they poured into what they were doing, humble about being scared and unsure, etc.”</p><p>To Bennett, the band’s frank discussion of mental health and the expectations placed on Asian teens was revolutionary. In 2016, she wrote a profile of the band that argued that they were changing the nature of K-pop through their interpersonal approach to image-making. While watching them on their 2017 “Wings” tour, she said, “there was a moment that really stuck out.”</p><p>“There’s a song the three rappers do called Cypher 4. The refrain is, ‘I love, I love, I love myself / I know, I know, I know myself.’</p><p>“I looked around me at hundreds of people in their 20s cheering every word, and I thought, ‘My god. They’re using their influence to teach young people — the ones most inclined to grapple with self-hatred — to start considering what self-love means.’”</p><p>The BTS ARMY is real, and it is mighty<br>BTS’s fans — who collectively gained the nickname ARMY for their well-organized and loyal response to the group — responded to that confessional strategy so well that by 2015, tickets for the band’s sold-out limited US tour were reportedly being scalped for more than $10,000. Tickets for their current sold-out tour are in high demand, with an average price of $452, the most expensive of the summer.</p><p>The big business of BTS, the K-pop band that’s changed music<br>BTS’s international fandom was also hard at work making sure the band had a chance to break through. Throughout 2017, fans systematically bombarded North American retailers like Walmart, Target, and Amazon with pleas to stock BTS’s new albums — and then promptly pushed the albums up the sales charts. The ARMY was so mighty that by the time BTS made their US television debut at the American Music Awards in 2017, the audience was treated to a time-honored K-pop spectacle: an auditorium ringing with fan chants.</p><p>The international BTS fandom has worked to mainstream K-pop as few other factors have. On Tumblr, the internet’s unofficial home for fandom communities, BTS and its members reign supreme, recalling the vast reach of One Direction in its heyday. In April 2018, Tumblr decided to stop breaking out K-pop as a separate category in its popular weekly Fandom Metrics, an official Tumblr product that measures the popularity of fandoms and related subtopics across the site. By merging K-pop with English-language groups, the account could more accurately reflect the relative popularity of K-pop bands to their Western counterparts.</p><p>The first week the categories merged, BTS debuted at No. 1 on the platform, ahead of Beyoncé and Harry Styles.</p><p>So who are these guys, anyway?<br>Bang’s initial idea for BTS was to build not a boy band, but rather a supporting crew around one talented teen: Kim Nam-joon, a.k.a. RM. He quickly opted to go the idol group route instead, and it took nearly three years of trying out different combinations of members and styles for the boy band to finally emerge.</p><p>Most K-pop groups have band members who occupy fixed, noticeable positions within the band: the leader, the public “face” of the group, the “visual,” whose main role is to be pretty, and so forth. Not every group has set roles, and most roles change over time. And because BTS is trying to be less staged than other groups, its roles are a lot blurrier than other groups. Still, there are a few constants:</p><p>The leader and lead rapper: RM</p><p>This is how you rap your way to international stardom. Giphy<br>Born Kim Nam-joon, RM is a 25-year-old rapper and the first member recruited to BTS. It’s not exaggerating to say that the entire band was built around him.</p><p>RM first made his name as an underground rapper; still in his teens, he was frequently spotted spitting verses alongside his friend Zico, who would go on to become the leader of the K-pop group Block B. After a friend told Bang about the rapping teen, Bang recruited him into his studio, where fans gave him the pre-debut nickname “Rap Monster.” From there, the idea to form an entire idol group rapidly took shape, and the Monster shortened his stage name to RM.</p><p>The dancer/rapper: J-Hope</p><p>The always-stylish, always-smiling Hobi. Giphy<br>Jung Hoseok, a.k.a. J-Hope, sometimes called Hobi, is most frequently described by fans as a ray of sunshine, thanks to his sweet personality. The 26-year-old is one of the group’s main songwriters as well as a frequent choreographer, its lead dancer, and one of its three main rappers. Since joining the group, he’s had a notable solo debut that landed him in the top 40 on the Billboard 200. And have I mentioned his chin could cut glass?</p><p>The vocalist/dancer: Jimin</p><p>We stan an angel with a heavenly voice and a personality to match. pingjin1204/Tistory<br>No single member of BTS is its “face,” but the spotlight often belongs to 22-year-old singer and dancer Park Jimin. Jimin is frequently positioned as the group’s lead vocalist. He’s also a part of the group’s dance line, for good reason, along with J-Hope, Jungkook, and Taehyung.</p><p>The mentor vocalist: Jin</p><p>Sweet and sincere, Dadjin is always here for you. Giphy<br>The 27-year-old Kim Seokjin, a.k.a. Jin, is the group’s oldest member, and as such he frequently occupies a mentorship role within the group (complete with dad jokes). He’s one of the group’s main vocalists, and though he’s not officially the group’s “visual,” he seems to have a habit of accidentally going viral for being beautiful.</p><p>The prodigy: Jungkook</p><p>Our maknae has come so far! Giphy<br>Depending on when and whom you ask, Jeon Jungkook is either the designated “face” of the group, the designated beauty, the designated main singer, the group’s centerpiece member, or all of the above. But there’s one role that never changes: At 22, he’s the youngest. The group often calls him the “golden maknae,” a.k.a. the golden child, because he’s a bit of a wunderkind in terms of talent. In fact, he was in high demand before he settled on joining Big Hit because he looked up to RM. But he’s unquestionably the baby of the group — and arguably its most popular member.</p><p>The rapper: Suga</p><p>Don’t let the hardcore rapping fool you — he’s as sweet as his name suggests! Giphy<br>Min Yoongi, stage name Suga, is one of the group’s three rappers. At 26, he’s also one of the oldest members, which makes him something of a group dad. His name comes from his preferred basketball position of shooting guard, but legend has it that Bang chose the name for him because it reflects his “sugary” personality — subtle, yet sweet and generous.</p><p>The vocalist/dancer: V</p><p>Kim Taehyung, the world’s most beautiful ball of chaos. vntae / Tumblr<br>The 24-year-old Kim Taehyung chose the stage name “V” for victory — but it could just as easily stand for “versatile”: He’s one of the vocalists, he worked his way onto the dance line, and he’s even tried his hand at rapping. His playful, quirky personality (let’s call it “singular”) and penchant for stealing the spotlight have made him one of the group’s most popular members. It also probably doesn’t hurt that he has chemistry with everything that moves.</p><p>Which reminds us: We can’t talk about boy bands in modern fandom without talking at least a little about shipping. BTS’s popularity lends itself to RPF (real-person fiction) shipping among the band members. And no wonder: The internet is teeming with gigabytes of media in which the members of BTS display zero interpersonal boundaries, are physically affectionate, and generally behave in playful, intimate ways that deconstruct heteronormative masculinity.</p><p>taehyung reading his letter to jimin moment gets me every single time pic.twitter.com/2SF2lSn6Qn</p><p>— ً (@yehbts) June 6, 2018<br>Again, they’re by no means the first band to do this: Boy bands in both Korea and Japan have spent decades being marketed with homoerotic appeal, and normal interactions between Korean men can read as transgressive of heteromasculine norms in English-language cultures. One Direction notoriously followed in the wake of these many groups by practicing a similar transgressive physical intimacy; in that fandom, Larry Stylinson shippers in particular essentially codified for the ARMY how to micro-analyze body language, onstage and off.</p><p>While BTS are experts at teasing homoeroticism in their videos, they’re also experts at evading questions of shipping — though in fandom, you can find every ship permutation there is. But there’s one ship that rules all, and that’s the relationship between band members and the ARMY itself. Crucial to the band’s success is its members’ ability to directly communicate their love and affection to fans. And honestly, grabbing and holding the attention of so many international fans, despite considerable language and cultural barriers to entry into the fandom, is an achievement by itself. In that respect, BTS may be truly a K-pop revelation.</p><p>A lot of this may be hype, but it’s important for K-pop’s legacy<br>Then again, not everything about BTS is a phenomenon. Understanding its rise to the top also means acknowledging that it’s not alone in its class: It’s succeeded and grown alongside other bands that are also innovating and reaching new levels of international success. Collectively, this K-pop generation is rapidly changing the conversation and pushing the limits of what K-pop is allowed to be.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;What-is-Hallyu&quot;&gt;&lt;a href=&quot;#What-is-Hallyu&quot; class=&quot;headerlink&quot; title=&quot;What is Hallyu?&quot;&gt;&lt;/a&gt;What is Hallyu?&lt;/h1&gt;&lt;h2 id=&quot;the-Korean-Wave</summary>
      
    
    
    
    <category term="Portfolio Drafts" scheme="https://shuoo-24.github.io/categories/Portfolio-Drafts/"/>
    
    <category term="WP1.1" scheme="https://shuoo-24.github.io/categories/Portfolio-Drafts/WP1-1/"/>
    
    
    <category term="K-pop" scheme="https://shuoo-24.github.io/tags/K-pop/"/>
    
    <category term="Writing" scheme="https://shuoo-24.github.io/tags/Writing/"/>
    
  </entry>
  
</feed>
